Загальний опис
Даний чат-застосунок реалізує клієнтську частину системи для обміну текстовими повідомленнями між користувачами через сервер. Клієнт відповідає за встановлення з'єднання з сервером, автентифікацію, обмін повідомленнями, отримання списку активних користувачів та запит історії чатів.

Основні компоненти


ClientService

Основний сервіс, через який користувач взаємодіє із сервером.
Відповідає за підключення, надсилання повідомлень, запити історії повідомлень та видалення акаунту.
Під час підключення виконується автентифікація (ім'я користувача + пароль).
Приймає callback-функції для обробки вхідних повідомлень та оновлення списку користувачів.

ChatClient

Клас, який управляє сокет-з'єднанням з сервером.
Відповідає за безпосереднє встановлення TCP-з'єднання, обробку вхідних та вихідних об’єктів.
Виконує автентифікацію, відправляє логін-запит на сервер.
Запускає окремий потік для прослуховування вхідних повідомлень та оновлення списку користувачів.
Підтримує закриття з'єднання.

Використання Hibernate для збереження даних
У чат-застосунку для збереження інформації про користувачів та їх повідомлення використано Hibernate — фреймворк для ORM (Object-Relational Mapping).
Завдяки Hibernate реалізовано зберігання даних у реляційній базі даних.

Моделі повідомлень

Message — об’єкт, який представляє текстове повідомлення, містить відправника, отримувача, текст, час надсилання та тип повідомлення.
MessageType — тип повідомлення (текст, запит історії, запит видалення акаунту тощо).
LoginRequest — об'єкт для автентифікації при підключенні.


Порядок роботи застосунку

Користувач вводить ім'я та пароль, запускається метод start() у ClientService.
Створюється сокет-з'єднання з сервером (локальний хост, порт 8000).
Відбувається відправка логін-запиту (об'єкт LoginRequest) на сервер.
Сервер повертає відповідь: або підтвердження успішної автентифікації, або повідомлення про помилку.
Якщо автентифікація успішна, запускається фоновий потік для прослуховування вхідних повідомлень і оновлення списку користувачів.
Користувач може надсилати текстові повідомлення іншим користувачам за допомогою sendMessage.
Користувач може запросити історію повідомлень із певним співрозмовником (requestHistoryWith).
Користувач має можливість видалити свій акаунт через deleteAccount.
Під час роботи застосунок отримує оновлення списку користувачів і нові повідомлення у реальному часі.
При виході або завершенні роботи викликається метод close() для коректного закриття з’єднання.


Особливості реалізації

Використовується серіалізація Java-об'єктів через ObjectInputStream/ObjectOutputStream.
Вхідні повідомлення обробляються асинхронно у фоновому потоці, а оновлення інтерфейсу здійснюється через Platform.runLater() (JavaFX).
Сервер може надсилати не лише повідомлення, а й список активних користувачів, який оновлюється на клієнті.
Підтримується різні типи повідомлень (текстові, запити історії, видалення акаунту).
В разі помилки з’єднання або отримання некоректних даних повідомляється про помилку.


Використання

Для запуску клієнта необхідно викликати метод start сервісу, передати ім'я, пароль і колбеки для обробки повідомлень та оновлення списку користувачів.
Для відправлення повідомлень використовувати sendMessage.
Для отримання історії чатів викликати requestHistoryWith.
Для видалення акаунту — deleteAccount.
Для коректного завершення роботи — close.

